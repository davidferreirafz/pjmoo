// Class automatically generated by Dev-C++ New Class wizard

#include "TopRecorde.h" // class's header file


const int TopRecorde::assCheck[assCheckSize]={ASSINATURA_JOGO_NOME,ASSINATURA_JOGO_SIGLA,ASSINATURA_JOGO_VERSAO};
TopRecorde::TopRecorde()
{
	arquivo="toprecord.top";
}
TopRecorde::~TopRecorde()
{
}
bool TopRecorde::adicionar(Recorde recorde)
{
	bool ok = false;

    if (!manager.pesquisar(recorde)){
        if (manager.adicionar(recorde)){
            ok = true;
        }
    }

	return ok;
}

void TopRecorde::imprimir()
{
	printf("\nImprimindo\n\r");
	for(int i=0; i<RecordeManager::tamanho; i++){
		printf(" recorde.id:%d\n",manager.recorde[i].id);
		printf("  recorde.nome:%s\n",manager.recorde[i].nome);	
		printf("  recorde.pontos:%d\n",manager.recorde[i].pontos);	
		printf("  recorde.dataPublicacao:%s\n",manager.recorde[i].dataPublicacao);
	}
}
bool TopRecorde::salvar()
{
	FILE *handleArquivo;   
	bool retorno = false;
	
	printf("\n*Salvando arquivo (%s)",arquivo.c_str());
	
	handleArquivo = fopen(arquivo.c_str(),"wb"); 
	
	if (handleArquivo!=NULL){
		fwrite(assCheck,sizeof(int),assCheckSize,handleArquivo);
		fwrite(&manager, sizeof(RecordeManager), 1, handleArquivo);
		fclose(handleArquivo);
		retorno = true;
	}
	
	if (retorno){
		printf(" [Ok]");
	} else {
		printf(" [Falhou]");
	}
	
	return retorno;
}
bool TopRecorde::setRecordeManager(RecordeManager recordeManager)
{
	manager=recordeManager;
}
bool TopRecorde::carregar()
{
	FILE *handleArquivo;
	char msgResposta[255];	
	bool retorno = false;
    int assLocal[assCheckSize];

	
	printf("\n*Caregando arquivo (%s)",arquivo.c_str());
	handleArquivo = fopen(arquivo.c_str(),"rb");
	
	if (handleArquivo!=NULL){
		fread(assLocal,sizeof(int),assCheckSize,handleArquivo);
		fread(&manager, sizeof(RecordeManager), 1, handleArquivo);  
		fclose(handleArquivo);

        retorno  = true;
        for (int a=0; a<assCheckSize; a++){
            if (assLocal[a]!=assCheck[a]){
                retorno = false;
                break;
            }
        }
        if (!retorno){
            sprintf(msgResposta,"Assinatura invalida C[%c%c%c]==L[%c%c%c]",
                    assCheck[0],assCheck[1],assCheck[2],
                    assLocal[0],assLocal[1],assLocal[2]);
        }
	} else {
        sprintf(msgResposta,"Falha ao abrir arquivo");
    }

	if (retorno){
		printf(" [Ok]");
	} else {
		printf(" [Falhou] \n\t# Erro: %s",msgResposta);
	}
	
	return retorno;
}



