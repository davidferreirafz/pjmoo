class CPU
!!!130964.cpp!!!	CPU()

    GraphicSystemImageBufferManager *gsImageBufferManager=GraphicSystemImageBufferManager::getInstance();
    SpriteFactory *spriteFactory = new SpriteFactory(gsImageBufferManager->getImageBuffer("personagem"));
    adicionarSpritePrincipal(spriteFactory->criarSpritePersonagem(15,21,14,80,1,1));
    delete(spriteFactory);

    iniciarVisao();
!!!131092.cpp!!!	~CPU()

    //dtor
!!!131220.cpp!!!	acao(inout input : InputSystem) : void
    Area areaVisaoBola = Util::converterArea(getVisaoBola().getDimensao(),getVisaoBola().getPosicao());
    Area visao         = Util::converterArea(getDimensao(),getPosicao());

    switch(pensar(visao,areaVisaoBola))
    {
        case DECISAO_SUBIR:
                subir();
            break;
        case DECISAO_DESCER:
                descer();
            break;
        case DECISAO_NADA:
        default:
                //nada para fazer
            break;
    }
!!!131604.cpp!!!	saque() : Ponto
    Ponto saque;

    saque.x=posicao.x+getDimensao().w;
    saque.y=posicao.y+rand()%(getDimensao().h-getVisaoBola().getDimensao().h);

    return saque;
!!!128281.cpp!!!	isColisao(inout personagem : PersonagemAbstract) : bool
    bool retorno = Raquete::isColisao(personagem);

    if (retorno){
        efeito = Efeito(rand()%3);
    }

    return retorno;
!!!128202.cpp!!!	iniciar() : void
    Raquete::iniciar();
    aumentarVisao();
!!!128005.cpp!!!	desenhar() : void
    Raquete::desenhar();

#ifdef DEBUG
    GraphicSystemGFX *gfx = GraphicSystemGFX::getInstance();

    gfx->setColor(255,255,255);
    gfx->circulo(posicao.x+getDimensao().w/2,posicao.y+getDimensao().h/2,raioVisao);

    gfx->setColor(255,0,0);
    gfx->circulo(posicao.x+getDimensao().w/2,posicao.y+getDimensao().h/2,getDimensao().h*1.4);
#endif
!!!131732.cpp!!!	iniciarVisao() : void
    raioVisao=200;
!!!131860.cpp!!!	aumentarVisao() : void
    raioVisao+=20;

    if (raioVisao>=getAreaTela().bottom){
        raioVisao=getAreaTela().bottom;
    }
!!!131988.cpp!!!	pensar(in visao : Area, in areaVisaoBola : Area) : Decisao
    float qx, qy, qr, qe; //para guardar o quadrado de x, y e raio
    Decisao decisao = DECISAO_NADA;

    //quadrado da distância em x
    qx = std::pow(float((areaVisaoBola.left + areaVisaoBola.right/2) - (visao.left + visao.right/2)), 2);
    //quadrado da distância em y
    qy = std::pow(float((areaVisaoBola.top + areaVisaoBola.bottom/2) - (visao.top  + visao.bottom/2)), 2);
    //quadrado da soma dos raios
    qr = std::pow(float(raioVisao), 2);
    //quadrado da soma dos raios para efeito
    qe = std::pow(float(visao.bottom*1.4), 2);


    if (qx + qy <= qr){

        if (qx + qy <= qe){
            switch (efeito){
                case EFEITO_CIMA:
                        if (visao.top >= areaVisaoBola.top+areaVisaoBola.bottom){
                            decisao = DECISAO_SUBIR;
                        } else if (visao.top+areaVisaoBola.bottom < areaVisaoBola.top+areaVisaoBola.bottom){
                            decisao = DECISAO_DESCER;
                        }
                    break;

                case EFEITO_BAIXO:
                        if (visao.top+visao.bottom <= areaVisaoBola.top){
                            decisao = DECISAO_DESCER;
                        } else
                        if (visao.top+visao.bottom >= areaVisaoBola.top+areaVisaoBola.bottom){
                            decisao = DECISAO_SUBIR;
                        }
                    break;

                case EFEITO_SEM:
                default:
                        if (visao.top > areaVisaoBola.top){
                            decisao = DECISAO_SUBIR;
                        } else  if (visao.top+visao.bottom < areaVisaoBola.top+areaVisaoBola.bottom){
                            decisao = DECISAO_DESCER;
                        }

                    break;
            }
        } else {
            if (visao.top > areaVisaoBola.top){
                decisao = DECISAO_SUBIR;
            } else  if (visao.top+visao.bottom < areaVisaoBola.top+areaVisaoBola.bottom){
                decisao = DECISAO_DESCER;
            }
        }
    }

    return decisao;
