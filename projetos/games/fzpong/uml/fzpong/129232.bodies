class GBF
!!!134992.cpp!!!	GBF()
    numscreenshot = 0;
    pathBase      = "";
    fps           = true;
    setDefaultPath(true);
!!!135120.cpp!!!	~GBF()
    UtilLog::cabecalho("Finalizando Ambiente do Escopo do Jogo");
    UtilLog::cabecalho("Descarregando Framework");

    delete(fpsSystem);
    delete(writeSystem);
    delete(GraphicSystemImageBufferManager::getInstance());
    delete(FrameLayerManager::getInstance());
    delete(graphicSystem);
    //delete(GraphicSystemScreen::getInstance());
    delete(soundSystem);
    delete(inputSystem);

    UtilLog::sistema("Removendo SDL");
    SDL_Quit();

    UtilLog::cabecalho("Descarregando Completo do Framework");
    UtilLog::finalizar();
!!!135248.cpp!!!	setTitulo(in titulo : std::string, in autor : std::string) : void
    UtilLog::setAutor(autor);
    UtilLog::setProjeto(titulo);
    carregar();
    setTitulo(titulo);
!!!135376.cpp!!!	iniciar(in width : int, in height : int, in bpp_color : int, in full : bool) : void
    UtilLog::cabecalho("Inicializando Framework");
    UtilLog::tracer("Inicializando ModoGráfico");

    VideoConfig config;
    config.w     = width;
    config.h     = height;
    config.color = bpp_color;
    config.full  = full;
    graphicSystem->gsMode->setConfig(config);

    if (config.full){
        graphicSystem->gsMode->setModeFullScreen();
    } else {
        graphicSystem->gsMode->setModeWindowScreen();
    }
    graphicSystem->sincronizar();

    //input.mouse.Carregar(&pacote,"cursor.bmp");

    //Inicializando Sistema de Audio
    soundSystem->iniciar(22050,AUDIO_S16SYS,CANAL_STEREO,2048,16);

    //Carregando Fontes Padrões
    UtilLog::tracer("Carregando Fontes Padrões para FonteManager");
    writeSystem->carregar(WriteSystemFontDefault::console,getPath()+"data//kernel//fonte//console.png");
    writeSystem->carregar(WriteSystemFontDefault::pumpdemi,getPath()+"data//kernel//fonte//pumpdemi.png");
    writeSystem->carregar(WriteSystemFontDefault::fixedsys,getPath()+"data//kernel//fonte//fixedsys.png");
    writeSystem->carregar(WriteSystemFontDefault::arial,getPath()+"data//kernel//fonte//arial.png");
    writeSystem->carregar(WriteSystemFontDefault::comic,getPath()+"data//kernel//fonte//comicsans.png");
    writeSystem->carregar(WriteSystemFontDefault::high,getPath()+"data//kernel//fonte//highlight.png");
    writeSystem->carregar(WriteSystemFontDefault::stac,getPath()+"data//kernel//fonte//staccato.png");

    //Detecta o idioma padrão do ambiente (Sistema Operacional)
    writeSystem->uiTexto->detectarIdioma();

    //FPSTimer primeira chamada
    fpsSystem->start();

    UtilLog::cabecalho("Iniciando Ambiente para Escopo do Jogo");
!!!135504.cpp!!!	atualizar() : void
    try {
        fpsSystem->processar();
        /*
        if (isFPS()){
            writeSystem->getFonte("console")->setAlpha(180);
            writeSystem->escrever("console",5,0,"FPS: %i",fpsSystem->getFPS());
            writeSystem->getFonte("console")->setAlpha(255);
        }
        */
        controleInterno();
        inputSystem->processar();
        graphicSystem->flip();
    } catch(...){
        UtilLog::tracer("SDL: %s", SDL_GetError());
        UtilLog::tracer("SDL_Image: %s", IMG_GetError());
        UtilLog::tracer("SDL_Mixer: %s", Mix_GetError());
    }
!!!135760.cpp!!!	setFPS(in show : bool) : void
    fps=show;
!!!135888.cpp!!!	isFPS() : bool
    return fps;
!!!136016.cpp!!!	setPath(inout fullPath : char) : void
    pathBase=UtilExtract::extractPath(fullPath);

    if (isDefaultPath()){
        UtilLog::setArquivo(fullPath);
        GraphicSystemImageBufferManager::setPathBase(pathBase);
        SoundSystemInterfaceManager::setPathBase(pathBase);
        UserInterfaceTexto::setPathBase(pathBase);
    }
!!!136144.cpp!!!	getPath() : std::string
    return pathBase;
!!!136272.cpp!!!	isDefaultPath() : bool
    return defaultPath;
!!!136400.cpp!!!	setDefaultPath(in ativo : bool) : void
    defaultPath=ativo;
!!!136528.cpp!!!	controleInterno() : void
    //F10 = Alterna entre modo de controle exclusivo
    if (inputSystem->teclado->isKey(SDLK_F10)){
        inputSystem->alternarControleExclusivo();
    //F11 = Alterna entre modo tela Cheia e Janela
    } else if (inputSystem->teclado->isKey(SDLK_F11)){
        if (SDL_WM_ToggleFullScreen(graphicSystem->gsMode->getScreen())==0){
            //UtilLog::getInstance()->inicializando("GBF :: Aviso");
            //UtilLog::getInstance()->comentario("Sem Suporte a troca entre FullScreen e WindowScreen");
        }
    //F12 = Salva um screen do jogo
    } else if (inputSystem->teclado->isKey(SDLK_F12)){
        char tela[255];
        numscreenshot++;
        sprintf(tela,"%s//data//screen//screen%03d.bmp",getPath().c_str(),numscreenshot);
        graphicSystem->salvarScreenShot(tela);
    //F5 = Tira o Som
    } else if (inputSystem->teclado->isKey(SDLK_F5)){
        //audio.Mute();
    }

!!!136784.cpp!!!	carregar() : void
    //Inicializando Log
    UtilLog::iniciar();

    //Inicializando Gerador Randômico
    UtilLog::sistema("Inicializando Gerador Randômico");
    srand(time(NULL));

    //Inicializando FPS do jogo
    fpsSystem = new TimerSystemFPS();

    //Inicializando Video
    graphicSystem = GraphicSystem::getInstance();
    GraphicSystemImageBufferManager::getInstance();
    FrameLayerManager::getInstance();

    //Inicializando Gerenciador de Fontes
    writeSystem = WriteSystemManager::getInstance();

    //Inicializando Input
    inputSystem = InputSystem::getInstance();

    //Inicializando Audio
    soundSystem = SoundSystem::getInstance();

    UtilLog::cabecalho("Carregamento Completo do Framework");
!!!136656.cpp!!!	setTitulo(in titulo : std::string) : void
    SDL_WM_SetCaption(titulo.c_str(),NULL);
