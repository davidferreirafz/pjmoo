class GraphicSystemImageBuffer
!!!148688.cpp!!!	GraphicSystemImageBuffer()
//    spriteFactory = new SpriteFactory(this);
//comentado na solucao para tentar resolver o problema de altadependencia
//junto com esta mudança as seguintes tb foram realizadas:
//
//removendo friend das classe que eram amigas de SpriteFactory:
//SpriteItem
//SpritePersonagem
//FrameLayer
//passando construtor de private para public:
//SpriteItem
//SpritePersonagem
//FrameLayer
!!!148816.cpp!!!	~GraphicSystemImageBuffer()
    //UtilLog::getInstance()->status("[GraphicSystemImageBuffer Removido(a)]");
!!!148944.cpp!!!	carregarArquivo(in arquivo : std::string) : bool
    imagem = IMG_Load(arquivo.c_str());

    if (imagem){
        converterSurface();
        setColorKey(255,0,255);
        return true;
    } else {
        return false;
    }
!!!149072.cpp!!!	desenhar(in POSICAO : Ponto) : void
    SDL_Rect rect,pos;

    rect  = this->tamanho;
    pos.x = POSICAO.x;  pos.y = POSICAO.y;
    pos.w = 0;          pos.h = 0;

    gsScreen->blitSurface(imagem,&rect,&pos);
!!!149200.cpp!!!	desenhar(in POSICAO : SDL_Rect, in TAMANHO : SDL_Rect, in FRAME : int) : void
    SDL_Rect rect;

    rect.x=(TAMANHO.x) + (FRAME * TAMANHO.w);
    rect.y=TAMANHO.y;
    rect.h=TAMANHO.h;
    rect.w=TAMANHO.w;

    gsScreen->blitSurface(imagem,&rect,&POSICAO);
!!!149328.cpp!!!	desenhar(in POSICAO : SDL_Rect, in TAMANHO : SDL_Rect, in FRAME : int, in CORTE : SDL_Rect) : void
    SDL_Rect rect;

    rect.x=(TAMANHO.x) + (FRAME * TAMANHO.w);
    rect.y=TAMANHO.y;
    rect.h=TAMANHO.h;
    rect.w=TAMANHO.w;

    if (CORTE.x>0){ rect.x+= CORTE.x; }
    if (CORTE.y>0){ rect.y = CORTE.y; }
    if (CORTE.w>0){ rect.w = CORTE.w; }
    if (CORTE.h>0){ rect.h = CORTE.h; }

    gsScreen->blitSurface(imagem,&rect,&POSICAO);
